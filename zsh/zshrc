# environment
export CLICOLOR=1
export LC_CTYPE=sv_SE.UTF-8
export SVN_EDITOR="vim"
export EDITOR="emacs" # Sad, but true.
export PATH=/usr/local/bin:/opt/local/bin:$PATH

# misc
autoload colors; colors;
autoload -U compinit
compinit -C
setopt prompt_subst
LISTMAX=0
setopt PROMPT_SUBST
setopt NO_PROMPT_CR
setopt NO_BEEP
setopt AUTO_MENU
setopt COMPLETE_IN_WORD
setopt EXTENDED_GLOB
setopt HIST_IGNORE_DUPS
setopt AUTOCD
setopt INTERACTIVE_COMMENTS

# case-insensitive
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# history
HISTSIZE=8192
HISTFILE=~/.zsh_history
SAVEHIST=2048

# alias
alias l="ls"
alias ll="l -lah"
alias scp="noglob scp"
alias irc="ssh -t molly.doubleint.com -p 222 screen -rdU"
alias decode_json='python -c "import sys, json; print json.dumps(json.load(sys.stdin), sort_keys=True, indent=4)"'
alias bower="noglob bower --no-color"
alias gst="git status"
alias gco="git checkout"

# Bind keys
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line
bindkey '^r' history-incremental-search-backward

# Git prompt
function update_current_git_vars() {
	unset __CURRENT_GIT_BRANCH
	unset __CURRENT_GIT_BRANCH_STATUS
	unset __CURRENT_GIT_BRANCH_IS_DIRTY

	local st="$(git status 2>/dev/null)"
	if [[ -n "$st" ]]; then
  	local -a arr
    arr=(${(f)st})

    if [[ $arr[1] =~ 'Not currently on any branch.' ]]; then
        __CURRENT_GIT_BRANCH='no-branch'
    else
        __CURRENT_GIT_BRANCH="${arr[1][(w)4]}";
    fi

    if [[ $arr[2] =~ 'Your branch is' ]]; then
    		if [[ $arr[2] =~ 'ahead' ]]; then
            __CURRENT_GIT_BRANCH_STATUS='ahead'
        elif [[ $arr[2] =~ 'diverged' ]]; then
            __CURRENT_GIT_BRANCH_STATUS='diverged'
        else
            __CURRENT_GIT_BRANCH_STATUS='behind'
        fi
    fi

    if [[ ! $st =~ 'nothing to commit' ]]; then
        __CURRENT_GIT_BRANCH_IS_DIRTY='1'
    fi
	fi
}

function prompt_git_info() {
if [ -n "$__CURRENT_GIT_BRANCH" ]; then
    local s="("
    s+="$__CURRENT_GIT_BRANCH"
    case "$__CURRENT_GIT_BRANCH_STATUS" in
        ahead)
        s+="↑"
        ;;
        diverged)
        s+="↕"
        ;;
        behind)
        s+="↓"
        ;;
    esac
    if [ -n "$__CURRENT_GIT_BRANCH_IS_DIRTY" ]; then
        s+="⚡"
    fi
    s+=")"
 
    printf " %s" $s
fi
}

function chpwd_update_git_vars() {
	update_current_git_vars
}

funcation preexec_update_git_vars() {
case "$1" in 
    git*)
    __EXECUTED_GIT_COMMAND=1
    ;;
esac
}

funcation precmd_update_git_vars() {
	if [ -n "$__EXECUTED_GIT_COMMAND" ]; then
    update_current_git_vars
    unset __EXECUTED_GIT_COMMAND
	fi
}

typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

preexec_functions+='preexec_update_git_vars'
precmd_functions+='precmd_update_git_vars'
chpwd_functions+='chpwd_update_git_vars'

#Colors
fg_white="%{"$'\033[00m'"%}"
fg_green=$'%{\e[0;32m%}'
fg_blue=$'%{\e[0;34m%}'
fg_cyan=$'%{\e[0;36m%}'
fg_red=$'%{\e[0;31m%}'
fg_brown=$'%{\e[0;33m%}'
fg_purple=$'%{\e[0;35m%}'
fg_light_gray=$'%{\e[0;37m%}'
fg_dark_gray=$'%{\e[1;30m%}'
fg_light_blue=$'%{\e[1;34m%}'
fg_light_green=$'%{\e[1;32m%}'
fg_light_cyan=$'%{\e[1;36m%}'
fg_light_red=$'%{\e[1;31m%}'
fg_light_purple=$'%{\e[1;35m%}'
fg_no_colour=$'%{\e[0m%}'

# Prompt
PROMPT=$'$fg_white%n$fg_green@$fg_white%m$fg_green%# $fg_white'
RPROMPT=$'$fg_green [%~]$fg_white$(prompt_git_info)'

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
